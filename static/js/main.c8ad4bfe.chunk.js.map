{"version":3,"sources":["components/Header/index.tsx","components/context/GlobalContext.tsx","components/context/actions.ts","components/Search/index.tsx","components/Weather/WeatherTile/index.tsx","components/ViewToggler/index.tsx","components/Weather/WeatherForcastBlock/index.tsx","components/Weather/index.tsx","components/Footer/index.tsx","App.tsx","index.tsx"],"names":["Header","className","initialState","loading","location","weatherData","coords","view","forcast","error","GlobalContext","createContext","globalReducer","state","action","type","payload","GlobalContextProvider","props","useReducer","dispatch","Provider","value","children","weather","key","this","city","axios","get","then","res","console","log","data","list","position","latitude","longitude","Search","useContext","useState","query","setQuery","onSubmit","event","a","async","preventDefault","getCurrentByCity","catch","xxx","getForecastByCity","handleSubmit","id","placeholder","onChange","handleChange","target","WeatherTile","main","temp","feels_like","temp_min","temp_max","pressure","humidity","icon","name","country","sys","src","alt","Math","round","wind","speed","ViewToggler","handleViewChange","updatedView","onClick","WeatherForcastBlock","currentDateTime","map","forcastItem","gmtDateTime","moment","unix","dt","localDateTime","local","format","localTime","colSpan","clouds","all","WeatherInfoBlock","color","height","width","Footer","React","modalIsOpen","setIsOpen","handleCloseModal","isOpen","contentLabel","onRequestClose","style","modalStyle","href","overlay","top","left","right","bottom","backgroundColor","App","useEffect","navigator","geolocation","getCurrentPosition","getCoordsSuccess","getCoordsError","enableHighAccuracy","timeout","getCurrentByCoords","currentWeather","getForecastByCoords","currentWeatherForecast","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8ad4bfe.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.scss';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"Header-Wrapper\">\r\n      <h1 className=\"Heading\">\r\n        <i className=\"fas fa-cloud-sun \" /> Weather App\r\n      </h1>\r\n      <p className=\"Slogan\">stay ahead of the weather</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport { IWeatherData } from '../../App';\r\n\r\n// Interface\r\nexport interface IState {\r\n  loading: boolean;\r\n  location: string;\r\n  weatherData: IWeatherData | null;\r\n  view: string;\r\n  coords: {\r\n    longitude: number;\r\n    latitude: number;\r\n  } | null;\r\n  forcast: [];\r\n  error: null | string;\r\n}\r\n\r\nexport interface IAction {\r\n  type: string;\r\n  payload?: any;\r\n}\r\n\r\n// Inital State\r\nexport const initialState: IState = {\r\n  loading: true,\r\n  location: 'Gold Coast',\r\n  weatherData: null,\r\n  coords: null,\r\n  view: 'current',\r\n  forcast: [],\r\n  error: null\r\n};\r\n\r\n// Create Context\r\nexport const GlobalContext = createContext<IState | any>(initialState);\r\n\r\n// Reducer\r\nexport const globalReducer = (state: IState, action: IAction) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n\r\n    case 'FETCH_WEATHER_DATA':\r\n      return { ...state, weatherData: action.payload };\r\n\r\n    case 'FETCH_COORDS':\r\n      return { ...state, coords: action.payload };\r\n\r\n    case 'SET_VIEW':\r\n      return { ...state, view: action.payload };\r\n\r\n    case 'FETCH_WEATHER_FORCAST':\r\n      return { ...state, forcast: action.payload };\r\n\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Context provider\r\nconst GlobalContextProvider = (props: any) => {\r\n  const [state, dispatch] = useReducer(globalReducer, initialState);\r\n\r\n  return <GlobalContext.Provider value={{ state, dispatch }}>{props.children}</GlobalContext.Provider>;\r\n};\r\n\r\nexport default GlobalContextProvider;\r\n","import axios from 'axios';\r\nimport { IWeatherData } from '../../App';\r\n\r\nexport interface IPosition {\r\n  longitude: number;\r\n  latitude: number;\r\n}\r\n\r\nclass Weather {\r\n  key: string; // OpenWeatherData API Key\r\n\r\n  constructor() {\r\n    this.key = 'a05e16e0743848e50a1d85870a6820c8';\r\n  }\r\n\r\n  // Get current weather for city via search query\r\n  async getCurrentByCity(city: string): Promise<any> {\r\n    return axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${this.key}&units=metric`).then((res: IWeatherData) => {\r\n      console.log('yeet', res.data);\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  // Get weather forecast for a city via search query\r\n  async getForecastByCity(city: string): Promise<any> {\r\n    return axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${this.key}&units=metric`).then((res: any) => {\r\n      return res.data.list;\r\n    });\r\n  }\r\n\r\n  //  Get current weather for city via coords\r\n  getCurrentByCoords(position: IPosition): Promise<any> {\r\n    return axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${position.latitude}&lon=${position.longitude}&APPID=${this.key}&units=metric`).then((res: IWeatherData) => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  //  Get weather forecast for city via coords\r\n  getForecastByCoords(position: IPosition): Promise<any> {\r\n    return axios.get(`https://api.openweathermap.org/data/2.5/forecast?lat=${position.latitude}&lon=${position.longitude}&appid=${this.key}&units=metric`).then((res: any) => {\r\n      return res.data.list;\r\n    });\r\n  }\r\n}\r\n\r\nexport const weather = new Weather();\r\n","import React, { useContext, FormEvent, useState } from 'react';\r\nimport { GlobalContext } from '../context/GlobalContext';\r\nimport { weather } from '../context/actions';\r\nimport './index.scss';\r\n\r\nconst Search = () => {\r\n  // Context & Component State\r\n  const { state, dispatch } = useContext(GlobalContext);\r\n  const [query, setQuery] = useState('');\r\n\r\n  const handleSubmit = async (event: FormEvent): Promise<void> => {\r\n    event.preventDefault();\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n\r\n    // Fetch current weather\r\n    await weather\r\n      .getCurrentByCity(query)\r\n      .then(weatherData => {\r\n        dispatch({ type: 'FETCH_WEATHER_DATA', payload: weatherData });\r\n      })\r\n      .catch(xxx => {\r\n        dispatch({ type: 'SET_LOADING', payload: false });\r\n      });\r\n\r\n    // Fetch weather forecast\r\n    await weather\r\n      .getForecastByCity(query)\r\n      .then(weatherData => {\r\n        dispatch({ type: 'FETCH_WEATHER_FORCAST', payload: weatherData });\r\n        dispatch({ type: 'SET_LOADING', payload: false });\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: 'SET_LOADING', payload: false });\r\n        dispatch({ type: 'SET_ERROR', payload: 'City not found. Please enter another one or check for typing errors.' });\r\n      });\r\n  };\r\n\r\n  const handleChange = (query: string): void => {\r\n    setQuery(query);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Search-Wrapper\">\r\n      <form\r\n        className=\"Search-Form\"\r\n        onSubmit={event => {\r\n          handleSubmit(event);\r\n        }}>\r\n        <input\r\n          id=\"Search-Input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter a location\"\r\n          onChange={event => {\r\n            handleChange(event.target.value);\r\n          }}\r\n        />\r\n        <button type=\"submit\" className=\"Search-Submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n      {state.error && (\r\n        <div className=\"Search-Error-Message\">\r\n          <i className=\"fas fa-exclamation-triangle\" /> {state.error}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../../context/GlobalContext';\r\nimport './index.scss';\r\n\r\nconst WeatherTile: React.FC = () => {\r\n  // Context & Data destructing\r\n  const { state } = useContext(GlobalContext);\r\n  const { temp, feels_like, temp_min, temp_max, pressure, humidity } = state.weatherData.main;\r\n  const { icon } = state.weatherData.weather[0];\r\n  const { name: location } = state.weatherData; // name: location is using renaming the destructed name to locaion\r\n  const { country } = state.weatherData.sys;\r\n\r\n  return (\r\n    <div className=\"Weather-Tile-Wrapper\">\r\n      <h2 className=\"Weather-Location\">\r\n        {location}, {country}\r\n      </h2>\r\n      <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"Raining\" />\r\n      <p className=\"Weather-Statistics-Names\">\r\n        Tempature: <span className=\"Weather-Statistics-Stats\">{Math.round(temp)}&#176;C</span>\r\n      </p>\r\n      <p className=\"Weather-Statistics-Names\">\r\n        Feels Like: <span className=\"Weather-Statistics-Stats\">{Math.round(feels_like)}&#176;C</span>\r\n      </p>\r\n      <p className=\"Weather-Statistics-Names\">\r\n        Minimum Temperature: <span className=\"Weather-Statistics-Stats\">{Math.round(temp_min)}&#176;C</span>\r\n      </p>\r\n      <p className=\"Weather-Statistics-Names\">\r\n        Maximum Temperature: <span className=\"Weather-Statistics-Stats\">{Math.round(temp_max)}&#176;C</span>\r\n      </p>\r\n      <p className=\"Weather-Statistics-Names\">\r\n        Humidity: <span className=\"Weather-Statistics-Stats\">{humidity}%</span>\r\n      </p>\r\n      <p className=\"Weather-Statistics-Names\">\r\n        Atmospheric preassure: <span className=\"Weather-Statistics-Stats\">{pressure}</span>\r\n      </p>\r\n      <p className=\"Weather-Statistics-Names\">\r\n        Wind: <span className=\"Weather-Statistics-Stats\">{state.weatherData.wind.speed}m/s</span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherTile;\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalContext';\r\nimport './index.scss';\r\n\r\nfunction ViewToggler() {\r\n  // Context\r\n  const { state, dispatch } = useContext(GlobalContext);\r\n\r\n  // Action Creator\r\n  const handleViewChange = (updatedView: string) => {\r\n    if (updatedView !== state.view) {\r\n      dispatch({ type: 'SET_VIEW', payload: updatedView });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"View-Toggler-Wrapper\">\r\n      <button\r\n        className={`View-Toggler-Button ${state.view === 'current' && 'View-Toggler-Button-Selected'}`}\r\n        onClick={() => {\r\n          handleViewChange('current');\r\n        }}>\r\n        CURRENT\r\n      </button>\r\n      <button\r\n        className={`View-Toggler-Button ${state.view === 'forecast' && 'View-Toggler-Button-Selected'}`}\r\n        onClick={() => {\r\n          handleViewChange('forecast');\r\n        }}>\r\n        FORECAST\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewToggler;\r\n","import React, { useContext, Fragment } from 'react';\r\nimport { GlobalContext } from '../../context/GlobalContext';\r\nimport moment from 'moment';\r\n\r\n// CONDITIONAL RENDER THIS BECAUSE SYS\r\nconst WeatherForcastBlock = () => {\r\n  const { state } = useContext(GlobalContext);\r\n  const { name: location } = state.weatherData;\r\n  const { country } = state.weatherData.sys;\r\n  const { forcast } = state;\r\n\r\n  let currentDateTime = ''; // Used to check if a table header needs to be created\r\n\r\n  return (\r\n    <div className=\"Weather-Forecast-Block-Wrapper\">\r\n      <h2 className=\"Weather-Location\">\r\n        {location}, {country}\r\n      </h2>\r\n      <table className=\"Weather-Forcast-Table\">\r\n        {/* Loops through each forecast item and returns a table row and/or header */}\r\n        {forcast.map((forcastItem: any) => {\r\n          // Convert UNIX timestamp to local time\r\n          let gmtDateTime = moment.unix(forcastItem.dt);\r\n          let localDateTime = gmtDateTime.local().format('dddd Do MMMM YYYY');\r\n          let localTime = gmtDateTime.format('HH:mm');\r\n\r\n          if (currentDateTime !== localDateTime) {\r\n            currentDateTime = localDateTime; // Update\r\n            return (\r\n              <Fragment>\r\n                <tr className=\"Weather-Forecast-Row-Header\">\r\n                  <th colSpan={8} className=\"Weather-Forecast-Row-Date\">\r\n                    {localDateTime}\r\n                  </th>\r\n                </tr>\r\n                <tr>\r\n                  <td className=\"Weather-Forecast-TD\">{localTime}</td>\r\n                  <td className=\"Weather-Forecast-TD\">\r\n                    <img className=\"Weather-Forecast-TD-Icon\" src={`http://openweathermap.org/img/wn/${forcastItem.weather[0].icon}@2x.png`} />\r\n                  </td>\r\n                  <td className=\"Weather-Forecast-TD Weather-Forecast-TD-Weather-Icon\">\r\n                    <i className=\"fas fa-temperature-low fa-lg\" />\r\n                  </td>\r\n                  <td className=\"Weather-Forecast-TD Weather-Forecast-TD-Weather-Value \">{Math.round(forcastItem.main.temp)}&#176;C</td>\r\n                  <td className=\"Weather-Forecast-TD Weather-Forecast-TD-Weather-Icon\">\r\n                    <i className=\"fas fa-wind fa-lg\" />\r\n                  </td>\r\n                  <td className=\"Weather-Forecast-TD Weather-Forecast-TD-Weather-Value \">{Math.round(forcastItem.wind.speed)}m/s</td>\r\n\r\n                  <td className=\"Weather-Forecast-TD Weather-Forecast-TD-Weather-Icon\">\r\n                    <i className=\"fas fa-cloud fa-lg\" />\r\n                  </td>\r\n                  <td className=\"Weather-Forecast-TD Weather-Forecast-TD-Weather-Value \">{forcastItem.clouds.all}%</td>\r\n                </tr>\r\n              </Fragment>\r\n            );\r\n          } else {\r\n            return (\r\n              <tr>\r\n                <td className=\"Weather-Forecast-TD\">{localTime}</td>\r\n                <td className=\"Weather-Forecast-TD\">\r\n                  <img className=\"Weather-Forecast-TD-Icon\" src={`http://openweathermap.org/img/wn/${forcastItem.weather[0].icon}@2x.png`} />\r\n                </td>\r\n                <td className=\"Weather-Forecast-TD Weather-Forecast-TD-Weather-Icon\">\r\n                  <i className=\"fas fa-temperature-low fa-lg\" />\r\n                </td>\r\n                <td className=\"Weather-Forecast-TD Weather-Forecast-TD-Weather-Value \">{Math.round(forcastItem.main.temp)}&#176;C</td>\r\n                <td className=\"Weather-Forecast-TD Weather-Forecast-TD-Weather-Icon\">\r\n                  <i className=\"fas fa-wind fa-lg\" />\r\n                </td>\r\n                <td className=\"Weather-Forecast-TD Weather-Forecast-TD-Weather-Value \">{Math.round(forcastItem.wind.speed)}m/s</td>\r\n\r\n                <td className=\"Weather-Forecast-TD Weather-Forecast-TD-Weather-Icon\">\r\n                  <i className=\"fas fa-cloud fa-lg\" />\r\n                </td>\r\n                <td className=\"Weather-Forecast-TD Weather-Forecast-TD-Weather-Value \">{forcastItem.clouds.all}%</td>\r\n              </tr>\r\n            );\r\n          }\r\n        })}\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherForcastBlock;\r\n","import React, { useContext } from 'react';\r\nimport WeatherTile from './WeatherTile';\r\nimport { GlobalContext } from '../context/GlobalContext';\r\nimport ViewToggler from '../ViewToggler';\r\nimport WeatherForcastBlock from './WeatherForcastBlock';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport Loader from 'react-loader-spinner';\r\nimport './index.scss';\r\n\r\nconst WeatherInfoBlock = () => {\r\n  // Context\r\n  const { state } = useContext(GlobalContext);\r\n  // JSX\r\n  return (\r\n    <div className=\"Weather-Wrapper\">\r\n      {state.loading && <Loader type=\"ThreeDots\" color=\"#487eb1\" height={50} width={50} />}\r\n\r\n      {state.view === 'current' && !state.loading && state.weatherData && <WeatherTile />}\r\n      {state.view === 'forecast' && !state.loading && state.weatherData && <WeatherForcastBlock />}\r\n      {state.weatherData && <ViewToggler />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherInfoBlock;\r\n","import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport './index.scss';\r\n\r\nconst Footer = () => {\r\n  const [modalIsOpen, setIsOpen] = React.useState(false);\r\n\r\n  const handleOpenModal = (): void => {\r\n    setIsOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = (): void => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Footer-Wrapper\">\r\n      <Modal className=\"Modal\" isOpen={modalIsOpen} contentLabel=\"onRequestClose Example\" onRequestClose={handleCloseModal} style={modalStyle}>\r\n        <h1 className=\"Modal-Heading\">About</h1>\r\n        <p className=\"Modal-Text\">This is a learning project that uses the openweathermap's API to provide current weather data and forecast for the next 5 days. Technologies used: HTML, SCSS/CSS, JavaScript/Typescript, and React.</p>\r\n        <button className=\"Modal-Close\" onClick={handleCloseModal}>\r\n          CLOSE\r\n        </button>\r\n      </Modal>\r\n      <a onClick={handleOpenModal}>About</a>\r\n      <a href=\"https://github.com/Beeek3r\">\r\n        <i className=\"fab fa-github\" /> Github\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n\r\nconst modalStyle: any = {\r\n  overlay: {\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    backgroundColor: 'rgba(255, 255, 255, 0.75)'\r\n  }\r\n};\r\n","import React, { useEffect, useContext } from 'react';\nimport './app.scss';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Weather from './components/Weather';\nimport { GlobalContext } from './components/context/GlobalContext';\nimport Footer from './components/Footer';\nimport { weather } from './components/context/actions';\n\nconst App: React.FC = () => {\n  // Context\n  const { dispatch } = useContext(GlobalContext);\n\n  // Hooks\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(getCoordsSuccess, getCoordsError, { enableHighAccuracy: true, timeout: 5000 });\n  }, []);\n\n  const getCoordsSuccess = async (position: any): Promise<void> => {\n    const { longitude, latitude } = position.coords;\n\n    // Get weather data for current location and dispatch\n    const currentWeather = await weather.getCurrentByCoords({ latitude: latitude, longitude: longitude });\n    dispatch({ type: 'FETCH_WEATHER_DATA', payload: currentWeather });\n\n    // Get weather forecast for current location and dispatch\n    const currentWeatherForecast = await weather.getForecastByCoords({ latitude: latitude, longitude: longitude });\n    dispatch({ type: 'FETCH_WEATHER_FORCAST', payload: currentWeatherForecast });\n    dispatch({ type: 'SET_LOADING', payload: false });\n  };\n\n  const getCoordsError = () => {\n    dispatch({ type: 'SET_LOADING', payload: false });\n  };\n\n  // JSX\n  return (\n    <div className=\"App\">\n      <div className=\"Container\">\n        <Header />\n        <Search />\n        <Weather />\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\nexport interface IWeatherData {\n  data: {\n    name: string;\n    weather: Array<IWeatherMain>;\n    main: {\n      temp: number;\n      feels_like: number;\n      temp_min: number;\n      temp_max: number;\n      pressure: number;\n      humidity: number;\n    };\n  };\n}\n\ninterface IWeatherMain {\n  id: number;\n  main: string;\n  description: string;\n  icon: string;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport GlobalContextProvider from './components/context/GlobalContext';\n\nReactDOM.render(\n  <GlobalContextProvider>\n    <App />\n  </GlobalContextProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}